name: Tests

on:
  push:
    branches:
      - sp/tool-cache-experiments
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-24.04
    outputs:
      go_services: ${{ steps.matrices.outputs.go_services }}
      node_services: ${{ steps.matrices.outputs.go_services }}
    steps:
      - uses: actions/checkout@v4
      # Because this is a mono-repo, we must determine which applications have changed
      - name: Paths Changes Filter
        id: filter
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        with:
          token: ${{ github.token }}
          filters: .github/utils/${{ matrix.language }}file-filters.yaml
      - name: Generate matrices
        id: matrices
        shell: bash
        run: |
          # TODO: move this logic out of inline script
          set -euo pipefail

          # `changes` is a JSON array of filter names that matched any file
          filters='${{ steps.filter.outputs.changes }}'

          go_json=$(jq '[ .[] | select(startswith("go/")) ]'  <<<"$filters")
          node_json=$(jq '[ .[] | select(startswith("node/")) ]'<<<"$filters")

          echo "go_services=$go_json"   >>"$GITHUB_OUTPUT"
          echo "node_services=$node_json" >>"$GITHUB_OUTPUT"

  go-tests:
    runs-on: ubuntu-24.04
    if: ${{ needs.changes.outputs.go_services != '[]' && needs.changes.outputs.go_services != '' }}
    needs: changes
    strategy:
      matrix:
        service: ${{ fromJson(needs.changes.outputs.go_services) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5.5.0
        with:
          go-version-file: ${{ matrix.service }}/go.mod

  # node-tests:
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: ./.github/actions/install-task
  #       with:
  #         version: "v3.44.0"
  #     - run: |
  #         which task
  #         task --version

  # Two options:
  # 1. have a job for each language and setup the toolchain locally
  # 2. have a matrix job that runs everything and handle it all inside of containers...
